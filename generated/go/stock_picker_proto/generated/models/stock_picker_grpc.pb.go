// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: stock_picker.proto

package models

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StockPickerService_GetStockPriceFluctuation_FullMethodName = "/stock_picker.StockPickerService/GetStockPriceFluctuation"
)

// StockPickerServiceClient is the client API for StockPickerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StockPickerServiceClient interface {
	GetStockPriceFluctuation(ctx context.Context, in *GetStockFluctuationRequest, opts ...grpc.CallOption) (*GetStockFluctuationResponse, error)
}

type stockPickerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStockPickerServiceClient(cc grpc.ClientConnInterface) StockPickerServiceClient {
	return &stockPickerServiceClient{cc}
}

func (c *stockPickerServiceClient) GetStockPriceFluctuation(ctx context.Context, in *GetStockFluctuationRequest, opts ...grpc.CallOption) (*GetStockFluctuationResponse, error) {
	out := new(GetStockFluctuationResponse)
	err := c.cc.Invoke(ctx, StockPickerService_GetStockPriceFluctuation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StockPickerServiceServer is the server API for StockPickerService service.
// All implementations must embed UnimplementedStockPickerServiceServer
// for forward compatibility
type StockPickerServiceServer interface {
	GetStockPriceFluctuation(context.Context, *GetStockFluctuationRequest) (*GetStockFluctuationResponse, error)
	mustEmbedUnimplementedStockPickerServiceServer()
}

// UnimplementedStockPickerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStockPickerServiceServer struct {
}

func (UnimplementedStockPickerServiceServer) GetStockPriceFluctuation(context.Context, *GetStockFluctuationRequest) (*GetStockFluctuationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockPriceFluctuation not implemented")
}
func (UnimplementedStockPickerServiceServer) mustEmbedUnimplementedStockPickerServiceServer() {}

// UnsafeStockPickerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockPickerServiceServer will
// result in compilation errors.
type UnsafeStockPickerServiceServer interface {
	mustEmbedUnimplementedStockPickerServiceServer()
}

func RegisterStockPickerServiceServer(s grpc.ServiceRegistrar, srv StockPickerServiceServer) {
	s.RegisterService(&StockPickerService_ServiceDesc, srv)
}

func _StockPickerService_GetStockPriceFluctuation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStockFluctuationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockPickerServiceServer).GetStockPriceFluctuation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockPickerService_GetStockPriceFluctuation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockPickerServiceServer).GetStockPriceFluctuation(ctx, req.(*GetStockFluctuationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StockPickerService_ServiceDesc is the grpc.ServiceDesc for StockPickerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StockPickerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stock_picker.StockPickerService",
	HandlerType: (*StockPickerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStockPriceFluctuation",
			Handler:    _StockPickerService_GetStockPriceFluctuation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stock_picker.proto",
}
